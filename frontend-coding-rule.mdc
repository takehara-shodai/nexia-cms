---
description:
globs:
alwaysApply: false
---
# Frontend Coding Rules

## ディレクトリ構造
- `features/`: ビジネス機能ごとのディレクトリ
- `shared/ui/`: Atomic Designに基づくUIコンポーネント
- `shared/`: 共通のhooks、lib、utils等
- `pages/`: ルーティング用のページコンポーネント
- `app/`: ルートコンポーネント、Provider等
- `entities/`: ドメインモデル

## 命名規則
- コンポーネント: PascalCase
- ファイル名: コンポーネント名と同じ
- 関数・変数: camelCase
- 定数: UPPER_SNAKE_CASE
- 型・インターフェース: PascalCase

## インポートパス
- 相対パス（`../`や`./`）の使用を避け、絶対パス（`@/`）を使用する
- 例：
  ```typescript
  // ❌ 相対パス（非推奨）
  import { Content } from '../../../features/content/types';
  
  // ✅ 絶対パス（推奨）
  import { Content } from '@/features/content/types';
  ```
- 絶対パスを使用することで：
  - ファイル移動時のimport修正が不要
  - パスの可読性が向上
  - 循環参照の防止
  - コードの保守性向上

## コンポーネント設計
- 単一責任の原則に従う
- 再利用可能なコンポーネントは`shared/ui/`に配置
- ビジネスロジックは`features/`に配置
- ページコンポーネントは表示のみを担当

## 型定義
- 明示的な型定義を推奨
- 型の共有は`types.ts`で管理
- 型の再利用性を考慮

## エラーハンドリング
- 適切なエラーメッセージ
- エラー状態のUI表示
- エラーログの記録

## パフォーマンス
- 不要な再レンダリングの防止
- メモ化の適切な使用
- コード分割の活用

## テスト
- 単体テストの作成
- コンポーネントのテスト
- ユーティリティ関数のテスト

## CI/CD
- コード品質チェック
- 自動テスト実行
- デプロイメント自動化

## ドキュメント
- コンポーネントの使用方法
- API仕様
- 環境構築手順
